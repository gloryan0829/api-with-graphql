{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","genres","summary","poster","className","src","alt","map","genre","index","key","slice","GET_MOVIES","gql","App","useQuery","data","loading","error","useEffect","console","log","movies","movie","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","document","getElementById"],"mappings":"6QAqCeA,G,MAjCD,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAChD,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKF,EAAQG,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBN,EAA9B,+BAA0CE,GAC1C,wBAAII,UAAU,eAAeL,GAC7B,4BAEQE,EAAOM,KAAI,SAACC,EAAOC,GACf,OACI,wBAAIC,IAAKD,EAAOL,UAAU,iBACrBI,OAMrB,wBAAIJ,UAAU,WAAWF,EAAQS,MAAM,EAAG,U,oNChBxD,IAAMC,EAAaC,YAAH,KAuCDC,EAzBH,WAAO,IAAD,EACiBC,YAASH,GAAlCI,EADQ,EACRA,KAAMC,EADE,EACFA,QADE,EACOC,MAKvB,OAJAC,qBAAU,WACRC,QAAQC,IAAIL,KACX,IACHI,QAAQC,IAAIL,GAEV,yBAAKZ,UAAU,aACZa,EACK,yBAAKb,UAAU,UAAS,0BAAMA,UAAU,eAAhB,eAEtB,yBAAKA,UAAU,UAEXY,GAAQA,EAAKM,OAAOf,KAAI,SAAAgB,GAEtB,OADAA,EAAK,OAAaA,EAAK,mBAChB,kBAAC,EAAD,eAAOb,IAAKa,EAAMzB,IAAQyB,U,sBC3B/CC,EAAQ,I,MAAIC,GAEZC,EAAO,IAAIC,IAAS,CACtBC,IAAK,2BAGHC,EAAS,IAAIC,IAAa,CAC5BJ,OACAF,UAGJO,IAASC,OACL,kBAAC,IAAD,CAAgBH,OAAQA,GACpB,kBAAC,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.c5dd1ce7.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\nconst Movie = ({id, year, title, genres, summary, poster}) => {\n  return (\n      <div className=\"movie\">\n          <img src={poster} alt={title} title={title} />\n          <div className=\"movie__data\">\n              <h3 className=\"movie__title\">{id} 영화제목 : {title}</h3>\n              <h3 className=\"movie__year\">{year}</h3>\n              <ul>\n                  {\n                      genres.map((genre, index) => {\n                          return (\n                              <li key={index} className=\"genres__genre\">\n                                  {genre}\n                              </li>\n                          )\n                      })\n                  }\n              </ul>\n              <h3 className=\"summary\">{summary.slice(0, 190)}</h3>\n          </div>\n      </div>\n  );\n};\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired\n};\n\n\nexport default Movie;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nconst GET_MOVIES = gql`\n  {\n    movies {\n      id\n      year\n      title\n      rating\n      genres\n      summary\n      medium_cover_image\n    }\n  }\n`;\n\nconst App = () => {\n  const { data, loading, error } = useQuery(GET_MOVIES);\n  useEffect(() => {\n    console.log(data);\n  }, []);\n  console.log(data);\n  return (\n    <div className=\"container\">\n      {loading\n          ? <div className=\"loader\"><span className=\"loader_text\">Loading...</span></div>\n          : (\n              <div className=\"movies\">\n                {\n                  data && data.movies.map(movie => {\n                    movie[\"poster\"] = movie[\"medium_cover_image\"];\n                    return <Movie key={movie.id} {...movie} />;\n                  })\n                }\n              </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\n\nconst cache = new InMemoryCache();\n\nconst link = new HttpLink({\n    uri: 'https://bit.ly/2SmzL89'\n});\n\nconst client = new ApolloClient({\n    link,\n    cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}